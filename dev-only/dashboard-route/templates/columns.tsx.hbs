'use client';

import { useRef, useState } from 'react';
import { CellContext, ColumnDef } from '@tanstack/react-table';
import { Edit, MoreHorizontal, Trash } from 'lucide-react';
import { toast } from 'sonner';
import Image from 'next/image';
import { checkPermission } from '@/lib/permission';
import { useSession } from 'next-auth/react';
import { TableHeaderWrapper } from '@/components/custom/table-header-wrapper';
import { Badge } from '@/components/ui/badge';

import {
    DropdownMenu,
    DropdownMenuContent,
    DropdownMenuItem,
    DropdownMenuLabel,
    DropdownMenuSeparator,
    DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';
import { isUri, removeHTML, currencyFormat } from '@/lib/utils';


import { Button } from '@/components/ui/button';
{{#if endpoints.list}}
    import {
        {{#each endpoints.list}}
            {{this.summary}}{{#unless @last}},{{/unless}}
        {{/each}}
        {{#each endpoints.remove}}
            {{this.summary}}{{#unless @last}},{{/unless}}
        {{/each}}
    } from '@/services/{{service}}';
    import {
        {{#each endpoints.list}}
            {{this.schemaImports}}{{#unless @last}},{{/unless}}
        {{/each}}
    } from '@/services/schema';
{{/if}}

{{#if endpoints.remove}}
    import {
        DeleteDialog,
        DeleteDialogRef,
    } from '@/components/custom/delete-dialog';
    import {
        {{#each endpoints.remove}}
            {{this.summary}}{{#unless @last}},{{/unless}}
        {{/each}}
    } from '@/services/{{service}}';
    import {
        {{#each endpoints.remove}}
            {{this.schemaImports}}{{#unless @last}},{{/unless}}
        {{/each}}
    } from '@/services/schema';
{{/if}}

{{#if (eq pathType 'all-in-one')}}
    {{#if endpoints.update}}
        import { UpdateDialog } from './components';
    {{/if}}
{{/if}}

{{#if (or endpoints.remove endpoints.update)}}
    const Action = ({ row }: CellContext< {{columnSchema.schemaTypeName}}, unknown>) => {
        const [loading, setLoading] = useState(false);
        const deleteDialogRef = useRef< DeleteDialogRef>(null);
        const { data } = useSession();
        {{#if endpoints.remove}}
            const canDelete = checkPermission(data, []);
        {{/if}}
        {{#if endpoints.update}}
            {{#if (eq pathType 'all-in-one')}}
                const canEdit = checkPermission(data, []);
            {{/if}}
        {{/if}}

        if ({{#if (eq pathType 'all-in-one')}}!canEdit && {{/if}}!canDelete) return null;

        return (
        <div className="me-2 flex justify-end gap-4">
            <DropdownMenu>
                <DropdownMenuTrigger asChild>
                    <Button variant="ghost" className="h-8 w-8 p-0">
                        <span className="sr-only">Open menu</span>
                        <MoreHorizontal className="h-4 w-4" />
                    </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent>
                    <DropdownMenuLabel>Actions</DropdownMenuLabel>
                    <DropdownMenuSeparator />
                    {{#if (eq pathType 'all-in-one')}}
                        {{#if endpoints.update}}
                            {canEdit && (
                                <UpdateDialog initialData={row.original} key={JSON.stringify(row.original)}>
                                    <DropdownMenuItem onSelect={ ( e )=> e.preventDefault() } >
                                        <Edit className="h-4 w-4" /> Edit
                                    </DropdownMenuItem>
                                </UpdateDialog>
                            )}
                        {{/if}}
                    {{/if}}
                    {{#if endpoints.remove}}
                        {canDelete && (
                            <DeleteDialog ref={deleteDialogRef} loading={loading} action={ ()=> {
                                setLoading(true);
                                // TODO: Please check after generate
                                {{#each endpoints.remove}}
                                    {{this.summary}}(row.original.id)
                                    .then((c) => toast.success(c.data.message))
                                    .catch((c) => toast.error(c.message))
                                    .finally(() => {
                                        deleteDialogRef.current?.close();
                                        setLoading(false);
                                    });
                                {{/each}}

                                }}
                                description={
                                    <>
                                        Are you sure you want to delete this item? <br/> This action cannot be undone.
                                    </>
                                }
                                >
                                <DropdownMenuItem onSelect={(e)=> e.preventDefault()}>
                                    <Trash className="h-4 w-4" />
                                    Delete
                                </DropdownMenuItem>
                            </DeleteDialog>
                        )}
                    {{/if}}
                </DropdownMenuContent>
            </DropdownMenu>
        </div>
        );
    };
{{/if}}

export const {{camelCase service}}Columns: ColumnDef<{{columnSchema.schemaTypeName}}>[] = [

    {{#if columnFields}}
        {{#each columnFields}}
            {
            id: '{{this.field}}',
            accessorKey: '{{this.field}}',
            header: ({ column }) => <TableHeaderWrapper column={column} />,
            cell: ({ row }) => {{#if (eq this.type 'array')}}
                {
                    const cellData = row.original.{{this.field}};
                    if(!!cellData[0]?.media_url) return (
                        <div className="flex items-center">
                            {
                            cellData.slice(0,3).map((c, idx) =>
                            <Image key={idx} src={ c.media_url } alt="" width={48} height={48}
                                className="rounded-full -mr-6 border" />)
                            }
                        </div>
                    )
                        return <p>{cellData.join(', ')}</p>
                    },
                {{else}}
                {{#if (eq this.type 'string')}}
                    {{#if (containsDesc this.field)}}
                    <span className="opacity-70">{removeHTML(row.original.{{this.field}}?.slice(0,300))}</span>,
                    {{else}}
                        {{#if (isImage this.field)}}
                            (   isUri(row.original.{{this.field}}) ?
                                    <Image src={ row.original.{{this.field}}! } alt="" width={48} height={48} className="rounded-md"/>
                                : <span className="opacity-70 size-12 rounded-md text-xs">No Image</span>
                            ),
                        {{else}}
                            row.original.{{this.field}}?.slice(0,300),
                        {{/if}}
                    {{/if}}
                {{else}}
                    {{#if (isCurrency this.field)}}
                        currencyFormat(row.original.{{this.field}}),
                    {{else}}
                        {{#if (eq this.value 'boolean')}}
                            <Badge variant={row.original.{{this.field}} ? 'outline' : 'destructive'}>
                            {row.original.{{this.field}} ? 'Active' : 'Inactive'}
                            </Badge>,
                        {{else}}
                            row.original.{{this.field}},
                        {{/if}}
                    {{/if}}
                {{/if}}
            {{/if}}
                enableSorting: {{#if (canSort this.field this.type)}} true {{else}} false {{/if}},
                enableColumnFilter: {{#if (canFilter this.field this.type)}} true {{else}} false {{/if}},
            },
        {{/each}}
    {{/if}}
    {{#if (or endpoints.remove endpoints.update)}}
        {
            id: 'actions',
            cell: Action,
            enableHiding: false,
        },
    {{/if}}
];