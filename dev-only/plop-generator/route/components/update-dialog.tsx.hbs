'use client';

import { ReactNode, useRef, useTransition, useState } from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { toast } from 'sonner';

import FormDialog, { FormDialogRef } from '@/components/custom/form-dialog';
import HtmlTipTapItem from '@/components/custom/html-tiptap-item';
import UploadImageItem from '@/components/custom/upload-image-item';
import {
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from '@/components/ui/form';
import { Input } from '@/components/ui/input';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';

import { patch{{pascalCase route-name}} } from '../actions';
import { {{pascalCase route-name}}BodyType, {{pascalCase route-name}}ItemType, {{camelCase route-name}}Schema } from '../schema';

export function UpdateDialog({
  children,
  initialData,
}: {
  children: ReactNode;
  initialData: {{pascalCase route-name}}ItemType;
}) {
  const dialogRef = useRef< FormDialogRef >(null);
  const [isPending, startTransition] = useTransition();
    {{#if (canFetchData dataKeys)}}
        const [dropdownData, setDropdownData] = useState< Record< string, any[] > >({});
        const [loading, startLoadingTransition] = useTransition();
    {{/if}}

  const form = useForm< {{pascalCase route-name}}BodyType >({
    resolver: zodResolver({{camelCase route-name}}Schema),
    defaultValues: initialData,
  });

  function onSubmit({ status, ...values }: {{pascalCase route-name}}BodyType) {
    startTransition(() => {
      patch{{pascalCase route-name}}({
        ...values,
        id: initialData.id,
        status: (status as unknown as string) === 'true',
      })
        .then(() => {
          toast.success('Updated successfully');
          dialogRef?.current?.close();
          form.reset();
        })
        .catch((e) => toast.error(e.message));
    });
  }

  return (
    <FormDialog
      ref={dialogRef}
      form={form}
      onSubmit={onSubmit}
      loading={isPending}
      title="Update {{sentenceCase route-name}}"
      submitText="Update"
      trigger={children}
        {{#if (canFetchData dataKeys)}}
            onOpenChange={ (c) => {
              if (c) {
                startLoadingTransition(() => {
                //          Promise.all([
                //              fetchSomething().then(res => res?.data?.data || []),
                //              fetchSomething().then(res => res?.data?.data || [])
                //           ]).then(([example_cat_id, example_product_id]) => {
                //                setDropdownData(prevData => ({ ...prevData, example_cat_id, example_product_id }));
                //          });
                });
              }
          }}
        {{/if}}
    >
        {{#if rawData}}
            {{#each rawData}}

                {{#if (isString value)}}
                    {{#if (containsDesc key)}}
                        {{> tiptapField key=key}}
                    {{else}}
                        {{#if (isImage value)}}
                            {{> imageUploadField key=key}}
                        {{else}}
                            {{> inputField key=key}}
                        {{/if}}
                    {{/if}}
                {{/if}}

                {{#if (isBoolean value)}}
                    {{> updateSelectBooleanField key=key}}
                {{/if}}

                {{#if (isNumber value)}}
                    {{#if (isID key)}}
                        {{> updateNumericSelectField key=key}}
                    {{else}}
                        {{> numberInputField key=key}}
                    {{/if}}
                {{/if}}
            {{/each}}
        {{/if}}
    </FormDialog>
  );
}
