'use client';

import { ReactNode, useRef, useTransition } from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { toast } from 'sonner';

import FormDialog, { FormDialogRef } from '@/components/custom/form-dialog';
import HtmlTipTapItem from '@/components/custom/html-tiptap-item';
import UploadImageItem from '@/components/custom/upload-image-item';
import {
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from '@/components/ui/form';
import { Input } from '@/components/ui/input';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';

import { patch{{pascalCase route-name}} } from '../actions';
import { {{pascalCase route-name}}BodyType, {{pascalCase route-name}}ItemType, {{camelCase route-name}}Schema } from '../schema';

export function UpdateDialog({
  children,
  initialData,
}: {
  children: ReactNode;
  initialData: {{pascalCase route-name}}ItemType;
}) {
  const dialogRef = useRef<FormDialogRef>(null);
  const [isPending, startTransition] = useTransition();

  const form = useForm<{{pascalCase route-name}}BodyType>({
    resolver: zodResolver({{camelCase route-name}}Schema),
    defaultValues: {
      ...initialData,
    },
  });

  function onSubmit({ status, ...values }: {{pascalCase route-name}}BodyType) {
    startTransition(() => {
      patch{{pascalCase route-name}}({
        ...values,
        id: initialData.id,
        status: (status as unknown as string) === 'true',
      })
        .then(() => {
          toast.success('Updated successfully');
          dialogRef?.current?.close();
          form.reset();
        })
        .catch((e) => toast.error(e.message));
    });
  }

  return (
    <FormDialog
      ref={dialogRef}
      form={form}
      onSubmit={onSubmit}
      loading={isPending}
      title="Update {{pascalCase route-name}}"
      submitText="Update"
      trigger={children}
    >
        {{#if rawData}}
            {{#each rawData}}

                {{#if (isString value)}}
                    {{#if (containsDesc key)}}
                        <FormField
                            control={form.control}
                            name="{{key}}"
                            render={({ field }) => <HtmlTipTapItem field={field} />}
                        />
                    {{else}}
                        {{#if (isImage value)}}
                            <FormField
                                control={form.control}
                                name="{{key}}"
                                render={({ field }) => (
                                    <UploadImageItem
                                        field={field}
                                        imagePrefix="{{key}}"
                                        label="{{sentenceCase key}}"
                                    />
                                )}
                            />
                        {{else}}
                            <FormField
                                control={form.control}
                                name="{{key}}"
                                render={({ field }) => (
                                    <FormItem>
                                        <FormLabel>{{sentenceCase key}}</FormLabel>
                                        <FormControl>
                                            <Input placeholder="Enter {{sentenceCase key}}" {...field} />
                                        </FormControl>
                                        <FormMessage />
                                    </FormItem>
                                )}
                            />
                        {{/if}}
                    {{/if}}
                {{/if}}

                {{#if (isBoolean value)}}
                    <FormField
                        control={form.control}
                        name="{{key}}"
                        render={({ field }) => (
                            <FormItem>
                                <FormLabel>{{sentenceCase key}}</FormLabel>
                                <Select onValueChange={(value) => field.onChange(value === "true")} value={field.value?.toString()}>
                                <FormControl>
                                    <SelectTrigger>
                                        <SelectValue placeholder="Select a {{sentenceCase key}}" />
                                    </SelectTrigger>
                                </FormControl>
                                <SelectContent defaultValue="false">
                                    <SelectItem value="true">Active</SelectItem>
                                    <SelectItem value="false">Inactive</SelectItem>
                                </SelectContent>
                                </Select>
                                <FormMessage />
                            </FormItem>
                        )}
                    />
                {{/if}}

                {{#if (isNumber value)}}
                    {{#if (isID key)}}
                        <FormField
                            control={form.control}
                            name="{{key}}"
                            render={({ field }) => (
                                <FormItem>
                                    <FormLabel>{{sentenceCase key}}</FormLabel>
                                    <Select onValueChange={(value) => field.onChange(Number(value))} value={field.value?.toString()}>
                                    <FormControl>
                                        <SelectTrigger>
                                            <SelectValue placeholder="Select a {{sentenceCase key}}" />
                                        </SelectTrigger>
                                    </FormControl>
                                    <SelectContent defaultValue="false">
                                        <SelectItem value="0">0</SelectItem>
                                        <SelectItem value="1">1</SelectItem>
                                        <SelectItem value="2">2</SelectItem>
                                        <SelectItem value="3">3</SelectItem>
                                    </SelectContent>
                                    </Select>
                                    <FormMessage />
                                </FormItem>
                            )}
                        />
                    {{else}}
                        <FormField
                            control={form.control}
                            name="{{key}}"
                            render={({ field }) => (
                                <FormItem>
                                    <FormLabel>{{sentenceCase key}}</FormLabel>
                                    <FormControl>
                                        <Input placeholder="Enter {{sentenceCase key}}" {...field} onChange={(e) => field.onChange(Number(e.target.value))}/>
                                    </FormControl>
                                    <FormMessage />
                                </FormItem>
                            )}
                        />
                    {{/if}}
                {{/if}}
            {{/each}}
        {{/if}}
    </FormDialog>
  );
}
