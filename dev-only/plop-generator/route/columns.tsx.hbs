'use client';

import { useRef, useState } from 'react';
import { CellContext, ColumnDef } from '@tanstack/react-table';
import { Edit, MoreHorizontal, Trash } from 'lucide-react';
import { toast } from 'sonner';
import Image from 'next/image';
import { checkPermission } from '@/lib/permission';
import { useSession } from 'next-auth/react';
import { TableHeaderWrapper } from '@/components/custom/table-header-wrapper';

import {
DropdownMenu,
DropdownMenuContent,
DropdownMenuItem,
DropdownMenuLabel,
DropdownMenuSeparator,
DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';

import {
DeleteDialog,
DeleteDialogRef,
} from '@/components/custom/delete-dialog';
import { Button } from '@/components/ui/button';

import { {{getRequestNameByMethod endpointList 'DELETE'}} } from './actions';
import { UpdateDialog } from './components';
import { {{pascalCase route-name}}ItemType } from './schema';
import { removeHTML, currencyFormat } from '@/lib/utils';

const Action = ({ row }: CellContext< {{pascalCase route-name}}ItemType, unknown>) => {
    const [loading, setLoading] = useState(false);
    const deleteDialogRef = useRef< DeleteDialogRef>(null);
        const { data } = useSession();
        const canDelete = checkPermission(data, []);
        const canEdit = checkPermission(data, []);

        if (!canEdit && !canDelete) return null;

        return (
        <div className="me-2 flex justify-end gap-4">
            <DropdownMenu>
                <DropdownMenuTrigger asChild>
                    <Button variant="ghost" className="h-8 w-8 p-0">
                        <span className="sr-only">Open menu</span>
                        <MoreHorizontal className="h-4 w-4" />
                    </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent>
                    <DropdownMenuLabel>Actions</DropdownMenuLabel>
                    <DropdownMenuSeparator />
                    {canEdit && (
                    <UpdateDialog initialData={row.original} key={JSON.stringify(row.original)}>
                        <DropdownMenuItem onSelect={ ( e )=> e.preventDefault() } >
                            <Edit className="h-4 w-4" /> Edit
                        </DropdownMenuItem>
                    </UpdateDialog>
                    )}
                    {canDelete && (
                    <DeleteDialog ref={deleteDialogRef} loading={loading} action={ ()=> {
                        setLoading(true);
                        // TODO: Please check after generate
                        {{getRequestNameByMethod endpointList 'DELETE'}}(row.original.id)
                        .then((c) => toast.success(c.data.message))
                        .catch((c) => toast.error(c.message))
                        .finally(() => {
                        deleteDialogRef.current?.close();
                        setLoading(false);
                        });
                        }}
                        description={
                        <>
                            Are you sure you want to delete this{' '}
                            <b className="text-foreground">{row.original.{{snakeCase (getNameField dataKeys)}} }</b>?
                        </>
                        }
                        >
                        <DropdownMenuItem onSelect={(e)=> e.preventDefault()}>
                            <Trash className="h-4 w-4" />
                            Delete
                        </DropdownMenuItem>
                    </DeleteDialog>
                    )}
                </DropdownMenuContent>
            </DropdownMenu>
        </div>
        );
        };

        export const {{camelCase route-name}}Columns: ColumnDef<{{pascalCase route-name}}ItemType>[] = [

            {{#if rawData}}
            {{#each rawData}}
            {
            id: '{{key}}',
            accessorKey: '{{key}}',
            header: ({ column }) =>
            <TableHeaderWrapper column={column} />,
            cell: ({ row }) => {{#if (isArray value)}}
            {
            const cellData = row.original.{{key}};
            if(!!cellData[0]?.media_url) return (
            <div className="flex items-center">
                {
                cellData.slice(0,3).map((c, idx) =>
                <Image key={idx} src={ c.media_url } alt="" width={48} height={48}
                    className="rounded-full -mr-6 border-border" />)
                }
            </div>
            )
            return <p>{cellData.join(', ')}</p>
            },
            {{else}}
            {{#if (isString value)}}
            {{#if (containsDesc key)}}
            <span className="opacity-70">{removeHTML(row.original.{{key}}?.slice(0,300))}</span>,
            {{else}}
            {{#if (isImage value)}}
            <Image src={ row.original.{{key}} } alt="" width={48} height={48} className="rounded-md" />,
            {{else}}
            row.original.{{key}}?.slice(0,300),
            {{/if}}
            {{/if}}
            {{else}}
            {{#if (isCurrency key)}}
            currencyFormat(row.original.{{key}}),
            {{else}}
            {{#if (isBoolean value)}}
            row.original.{{key}} ? 'Active' : 'Inactive',
            {{else}}
            row.original.{{key}},
            {{/if}}
            {{/if}}
            {{/if}}
            {{/if}}
            enableSorting: {{#if (canSort key value)}} true {{else}} false {{/if}},
            enableColumnFilter: {{#if (canFilter key value)}} true {{else}} false {{/if}},
            },
            {{/each}}
            {{/if}}
            {
            id: 'actions',
            cell: Action,
            },
            ];