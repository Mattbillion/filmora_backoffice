'use client';

import { useRef, useState } from 'react';
import { CellContext, ColumnDef } from '@tanstack/react-table';
import { Edit, Trash } from 'lucide-react';
import { toast } from 'sonner';
import Image from 'next/image';
import { checkPermission } from '@/lib/permission';
import { useSession } from 'next-auth/react';

import {
  DeleteDialog,
  DeleteDialogRef,
} from '@/components/custom/delete-dialog';
import { Button } from '@/components/ui/button';

import { delete{{pascalCase route-name}} } from './actions';
import { UpdateDialog } from './components';
import { {{pascalCase route-name}}ItemType } from './schema';
import { removeHTML, currencyFormat } from '@/lib/utils';

const Action = ({ row }: CellContext< {{pascalCase route-name}}ItemType, unknown>) => {
  const [loading, setLoading] = useState(false);
  const deleteDialogRef = useRef< DeleteDialogRef >(null);
  const {data: session} = useSession();

  return (
    <div className="me-2 flex justify-end gap-4">
      {checkPermission(session, []) &&
        <UpdateDialog
                initialData={row.original}
                key={JSON.stringify(row.original)}
        >
            <Button size={'cxs'} variant="outline">
                <Edit className="h-4 w-4" /> Edit
            </Button>
        </UpdateDialog>
      }

      <DeleteDialog
        ref={deleteDialogRef}
        loading={loading}
        permissions={[]}
        action={() => {
          setLoading(true);
          delete{{pascalCase route-name}}(row.original.id)
            .then((c) => toast.success(c.data.message))
            .catch((c) => toast.error(c.message))
            .finally(() => {
              deleteDialogRef.current?.close();
              setLoading(false);
            });
        }}
        description={
          <>
            Are you sure you want to delete this{' '}
            <b className="text-foreground">{row.original.{{snakeCase route-name}}_name}</b>?
          </>
        }
      >
        <Button size={'cxs'}>
          <Trash className="h-4 w-4" />
          Delete
        </Button>
      </DeleteDialog>
    </div>
  );
};

export const {{camelCase route-name}}Columns: ColumnDef<{{pascalCase route-name}}ItemType>[] = [
  {
    accessorKey: 'id',
    header: 'ID',
    cell: ({ row }) => {
      return <div className="px-1 py-2">{row.original.id}</div>;
    },
  },
    {{#if rawData}}
        {{#each rawData}}
          {
            id: '{{key}}',
            header: '{{sentenceCase key}}',
            cell: ({ row }) => {{#if (isArray value)}}
                                    {
                                        const cellData = row.original.{{key}};
                                        if(!!cellData[0]?.media_url) return (
                                                <div className="flex items-center">
                                                    {
                                                        cellData.slice(0,3).map((c, idx) => <Image key={idx} src={ c.media_url } alt="" width={48} height={48} className="rounded-full -mr-6 border-border" />)
                                                    }
                                                </div>
                                        )
                                        return <p>{cellData.join(', ')}</p>
                                    },
                                {{else}}
                                    {{#if (isString value)}}
                                        {{#if (containsDesc key)}}
                                            <p>html: <span className="opacity-70">{removeHTML(row.original.{{key}}?.slice(0,300))}</span></p>,
                                        {{else}}
                                            {{#if (isImage value)}}
                                                <Image src={ row.original.{{key}} } alt="" width={48} height={48} className="rounded-md" />,
                                            {{else}}
                                                row.original.{{key}}?.slice(0,300),
                                            {{/if}}
                                        {{/if}}
                                    {{else}}
                                        {{#if (isCurrency key)}}
                                            currencyFormat(row.original.{{key}}),
                                        {{else}}
                                            {{#if (isBoolean value)}}
                                                row.original.{{key}} ? 'Active' : 'Inactive',
                                            {{else}}
                                                row.original.{{key}},
                                            {{/if}}
                                        {{/if}}
                                    {{/if}}
                                {{/if}}
          },
        {{/each}}
    {{/if}}
  {
    id: 'actions',
    cell: Action,
  },
];
