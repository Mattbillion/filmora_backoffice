import { QueryParams } from '@/lib/utils';
import * as actions from './api/actions';
import { executeRevalidate } from './api/helpers';
import type { ID, PaginatedResType } from './api/types';
import { {{{schemaImports}}} } from './schema';
import { RVK_{{rvkConst}} } from './rvk';

// Auto-generated service for {{service}}

{{#each endpointList}}
export async function {{this.summary}}(
    {{#if this.pathArgs}}
        {{{this.pathArgs}}},
    {{/if}}
    {{#if this.queryArg}}
        searchParams:{{{this.queryArg}}} = {},
    {{/if}}
    {{#if (or (eq this.method 'post') (eq this.method 'put') (eq this.method 'patch'))}}
        body: {{#if this.bodySchemaTypeName}}{{this.bodySchemaTypeName}}Type{{/if}}
    {{/if}}
) {
  {{#if (eq this.method 'get')}}
  const res = await actions.get<{{#if this.schemaTypeName}}{{this.schemaTypeName}}Type{{else}}any{{/if}}>({{{this.route}}},
      {
        {{#if this.queryArg}}
        searchParams,
        {{/if}}
        next: {
                tags: [
                    RVK_{{../rvkConst}}
                        {{#if this.pathArgs}}
                            {{#each this.detailTag}}
                                ,`${ RVK_{{../../rvkConst}} }_{{{this}}}`
                            {{/each}}
                        {{/if}}
                    ]
            }
      });
  {{/if}}
  {{#if (eq this.method 'destroy')}}
  const res = await actions.destroy<{{#if this.schemaTypeName}}{{this.schemaTypeName}}Type{{else}}any{{/if}}>({{{this.route}}});
  {{/if}}
  {{#if (or (eq this.method 'post') (eq this.method 'put') (eq this.method 'patch'))}}
  const res = await actions.{{this.method}}<{{#if this.schemaTypeName}}{{this.schemaTypeName}}Type{{else}}any{{/if}}>({{{this.route}}}, body);
  {{/if}}

  const { body: response, error } = res;
  if (error) throw new Error(error);

  {{#if this.shouldRevalidate}}
  executeRevalidate([
              RVK_{{../rvkConst}}
              {{#if this.pathArgs}}
                  {{#each this.detailTag}}
                          ,`${ RVK_{{../../rvkConst}} }_{{{this}}}`
                  {{/each}}
              {{/if}}
          ]);
  {{/if}}

  return response;
}

{{/each}}
